[package]
name = "mmtk_openjdk"
version = "0.12.0"
authors = [" <>"]
rust-version = "1.57.0"

[lib]
name = "mmtk_openjdk"
# be careful - LTO is only allowed for certain crate types
crate-type = ["cdylib"]

[profile.dev]
panic = "abort"
codegen-units = 24

[profile.release]
lto = true
codegen-units = 1
# codegen-units = 24
# debug-assertions = true
# debug = true

# Metadata for the OpenJDK repository
[package.metadata.openjdk]
# Our CI matches the following line and extract mmtk/openjdk. If this line is updated, please check ci yaml files and make sure it works.
openjdk_repo = "https://github.com/mmtk/openjdk.git"
openjdk_version = "ca90b43f0f51d9ddf754e6ab134c5030cf54118b"

[dependencies]
libc = "0.2"
lazy_static = "1.1"
spin = "0.9.2"
once_cell = "1.10.0"
# Be very careful to commit any changes to the following mmtk dependency, as our CI scripts (including mmtk-core CI)
# rely on matching these lines to modify them: e.g. comment out the git dependency and use the local path.
# These changes are safe:
# - change branch
# - change repo name
# But other changes including adding/removing whitespaces in commented lines may break the CI.
mmtk = { git = "https://github.com/wenyuzhao/mmtk-core.git", rev = "1e4361c86a76e04cc1aac999cb344f77b4c137ed" }
# Uncomment the following to build locally
# mmtk = { path = "../repos/mmtk-core" }

[features]
default = []
release_debug_assertions = []
mmtk_extreme_assertions = ["mmtk/extreme_assertions"]
nogc_lock_free = ["mmtk/nogc_lock_free"]
nogc_no_zeroing = ["mmtk/nogc_no_zeroing"]
# Use the env var GLOBAL_ALLOC_BIT=1 when building OpenJDK so the fastpath for setting the alloc bit will be compiled in.
# See README.
global_alloc_bit = ["mmtk/global_alloc_bit"]
no_fast_alloc = []

# This compile time constant places the mark bit in the header of the object instead of on the side.
mark_bit_in_header = []

# We can select plan at runtime. So no need to use any of these features.
# However, if any of these is provided during build-time, we will ignore any runtime flag and
# always run this plan. Performance-wise there is no difference. The main reason for these features
# is to temporarily allow running performance tests without changing performance scripts.
nogc = []
semispace = []
gencopy = []
marksweep = []
pageprotect = []
immix = []

sanity = ["mmtk/sanity"]
barrier_measurement = ["mmtk/barrier_measurement"]
work_packet_timer = ["mmtk/work_packet_timer"]
yield_and_roots_timer = ["mmtk/yield_and_roots_timer"]
satb_timer = ["mmtk/satb_timer"]
instrumentation = ["mmtk/instrumentation"]
log_gc = ["mmtk/log_gc"]
log_stages = ["mmtk/log_stages"]
log_work_packets = ["mmtk/log_work_packets"]

ix_block_only = ["mmtk/ix_block_only"]
ix_defrag = ["mmtk/ix_defrag"]

lxr_heap_health_guided_gc = ["mmtk/lxr_heap_health_guided_gc"]

# Non-moving, Non-concurrent LXR
lxr_basic = ["mmtk/lxr_basic"]
# LXR (Concurrent marking)
lxr_cm = ["mmtk/lxr_cm"]
# LXR (Lazy RC processing)
lxr_lazy = ["mmtk/lxr_lazy"]
# LXR (Concurrent)
lxr_conc = ["mmtk/lxr_conc"]
# LXR (Evacuation)
lxr_nevac = ["mmtk/lxr_nevac"]
lxr_evac = ["mmtk/lxr_evac"]
# LXR (Block only)
lxr_block = ["mmtk/lxr_block"]
lxr_rc_only = ["mmtk/lxr_rc_only"]
# LXR (Default config with full features)
lxr = ["mmtk/lxr"]
